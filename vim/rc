" vim: syntax=vim
" Vundle. Plugin manager.
  " Brief help:
  " :PluginList          - list configured bundles
  " :PluginInstall(!)    - install(update) bundles
  " :PluginSearch(!) foo - search(or refresh cache first) for foo
  " :PluginClean(!)      - confirm(or auto-ap prove) removal of unused bundles
  " for more details see :h vundle  or https://github.com/gmarik/vundle
  set nocompatible  " be iMproved, required
  filetype off  " required
  " set the runtime path to include Vundle and initialize
  set rtp+=~/.vim/bundle/Vundle.vim
  call vundle#begin()
  " alternatively, pass a path where Vundle should install plugins
  "call vundle#begin('~/some/path/here')

  " let Vundle manage Vundle, required
  Plugin 'gmarik/Vundle.vim'

  " Keep Plugin commands between vundle#begin/end.

    " Nginx syntax highlighting
    Plugin 'chr4/nginx.vim'

    Plugin 'tpope/vim-sensible'

    " Nice start screen
    Plugin 'mhinz/vim-startify'

    " Pretty and functionality statusline.
    Plugin 'vim-airline/vim-airline'
    Plugin 'vim-airline/vim-airline-themes'

    " The best colorscheme.
    Plugin 'altercation/vim-colors-solarized'

    " Perform all your vim insert mode completions with Tab
    Plugin 'ervandew/supertab'

    " Shows 'Nth match out of M' at every search
    Plugin 'vim-scripts/IndexedSearch'

    " NERDTree. A tree explorer plugin
    Plugin 'scrooloose/nerdtree'
    Plugin 'jistr/vim-nerdtree-tabs'

    " Show added / changed / deleted rows by Git.
    Plugin 'airblade/vim-gitgutter'

    " Best syntax checker
    Plugin 'scrooloose/syntastic'

    " Easy config code style
    Plugin 'editorconfig/editorconfig-vim'

  " All of your Plugins must be added before the following line
  call vundle#end()  " required
  filetype plugin on  " required

" Put your non-Plugin stuff after this line

" Plugins settings

  " Airline.
    let g:airline_theme = 'solarized'
    let g:airline_solarized_bg = 'dark'
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#tabline#enabled = 1  " enable tab line
    let g:airline#extensions#tmuxline#enabled = 0  " disable autochange Tmuxline
    set laststatus=2  " Window always has a status line
    set noshowmode  " Hide the default mode text (e.g. -- INSERT -- below the statusline)

  " GitGutter.
    let g:gitgutter_sign_removed = '-'
    let g:gitgutter_sign_modified_removed = '~-'

  " NERDTree.
    let NERDTreeShowBookmarks = 1
    let NERDTreeChDirMode = 1
    let NERDTreeQuitOnOpen = 1
    let NERDTreeShowHidden = 1
    " Disable display of the 'Bookmarks' label and 'Press ? for help' text
    let NERDTreeMinimalUI = 1
    " Use arrows instead of + ~ chars when displaying directories
    let NERDTreeDirArrows = 1
    let NERDTreeBookmarksFile= $HOME . '/.vim/.NERDTreeBookmarks'
    let NERDTreeIgnore=['\.py[c|o]$', '\~$']
    let NERDTreeRespectWildIgnore = 1

    " calls NERDTreeFind iff NERDTree is active, current window contains a modifiable file, and we're not in vimdiff
    function! SyncTree()
      if bufname('%') !~? 'nerd_tree_*'
        nmap <Bs> :NERDTreeFind<CR>
      else
        nmap <Bs> :NERDTreeTabsToggle<CR>
      endif
    endfunction

    autocmd BufEnter * call SyncTree()

  " Solarized.
    let g:solarized_termcolors = 256
    let g:solarized_termtrans = 1
    set background=dark
    colorscheme solarized

  " Startify
    let g:startify_change_to_dir = 0
    let g:startify_files_number = 8
    let g:startify_bookmarks = ['~/.vimrc',]
    let g:startify_skiplist = ['vimrc',]
    let g:startify_list_order = [
      \ ['   Last recently modified files in the current directory:'],
      \ 'dir',
      \ ['   Last recently opened files:'],
      \ 'files',
      \ ['   My sessions:'],
      \ 'sessions',
      \ ['   My bookmarks:'],
      \ 'bookmarks',
    \ ]

" Common settings

  " Character encodings considered when starting to edit an existing file
  set fileencodings=utf-8,cp1251
  " Display invisible characters
  set list
  set listchars=tab:▸\ ,trail:·,extends:❯,precedes:❮,nbsp:×
  " Wordwrap
    set wrap  " Wrap long lines
    set linebreak  " Don't break words when wrapping
    " Show ↪ at the beginning of wrapped lines
    if has('linebreak')
      let &sbr = nr2char(8618).' '
    endif
  " Indent
    " Use spaces instead of tab
    set expandtab
    " Number of spaces to use for each step of (auto)indent
    set shiftwidth=2
    " Number of spaces that a tab counts for
    set tabstop=2
    " Number of spaces that a tab counts for while performing editing operations
    set softtabstop=2
    " Override default settings by filetype
    if has('autocmd')
      " Python
        " Number of column to be highlighted
        autocmd FileType python set colorcolumn=80
        " Number of spaces to use for each step of (auto)indent
        autocmd FileType python set shiftwidth=4
        autocmd FileType python set tabstop=4
        autocmd FileType python set softtabstop=4
    end
  " Cursor
    " Highlight the screen line of the cursor
    set cursorline
    " Set cursor to its last position
    if has('autocmd')
      autocmd BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif
    end
  " Backup
    set nobackup  " Don't create backups
    set noswapfile  " Don't create swap files
