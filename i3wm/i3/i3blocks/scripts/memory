#!/bin/sh
#
# Show free memory in Solarized Dark colorscheme
#
# If you not see $label below use other font :)

################################################################
# Click
################################################################

[ -n "$BLOCK_BUTTON" ] && pkill -f conky
# Left click
if [ "$BLOCK_BUTTON" = "1" ]; then
  i3-msg -q exec conky
# Middle click
#elif [ "$BLOCK_BUTTON" = "2" ]; then
# Right click
#elif [ "$BLOCK_BUTTON" = "3" ]; then
fi

################################################################
# Output
################################################################

# First argument is source (mem/swap), second is output value
# Check /proc/meminfo for possible instances
INSTANCE="${BLOCK_INSTANCE:-mem;free}"

SOURCE=$(echo "$INSTANCE" | awk -F ';' '{print $1}')
[ "$SOURCE" = "mem" ] && URGENT_VALUE=90
[ "$SOURCE" = "swap" ] &&  URGENT_VALUE=50

DISPLAY=$(echo "$INSTANCE" | awk -F ';' '{print $2}')
[ -z "$DISPLAY" ] && DISPLAY="free"

ONE_KB=1024
ONE_MB=$(echo "$ONE_KB*1024" | bc -l)
ONE_GB=$(echo "$ONE_MB*1024" | bc -l)
ONE_TB=$(echo "$ONE_GB*1024" | bc -l)

# Grep the value and remove KB so we can calculate with it later
MEMORY_INFOS=$(cat /proc/meminfo)
SOURCE_TOTAL=$(echo "$MEMORY_INFOS" | grep -i "$SOURCE"total | awk -F ':' '{print $2}' | tr -d ' kB')

[ "$SOURCE_TOTAL" -le "0" ] && exit

[ "$SOURCE" = "mem" ] && SOURCE_FREE_KEY="available"
[ "$SOURCE" = "swap" ] && SOURCE_FREE_KEY="free"

SOURCE_FREE=$(echo "$MEMORY_INFOS" | grep -i "$SOURCE""$SOURCE_FREE_KEY" | awk -F ':' '{print $2}' | tr -d ' kB')
SOURCE_USED=$(echo "scale=0; $SOURCE_TOTAL-$SOURCE_FREE" | bc -l)
SOURCE_PERC=$(echo "scale=0; ($SOURCE_USED*100)/$SOURCE_TOTAL" | bc -l)

[ "$DISPLAY" = "free" ] && MEMINFO="$SOURCE_FREE"
[ "$DISPLAY" = "used" ] && MEMINFO="$SOURCE_USED"
[ "$DISPLAY" = "total" ] && MEMINFO="$SOURCE_TOTAL"
[ "$DISPLAY" = "perc" ] && MEMINFO="$SOURCE_PERC%"

if [ "$DISPLAY" != "perc" ]; then
  # Convert KB meminfo to bytes
  MEMINFO=$(echo "$MEMINFO*$ONE_KB" | bc -l)

  if [ "$MEMINFO" -ge "$ONE_TB" ]; then
    MEMINFO=$(echo "scale=3;$MEMINFO/$ONE_TB" | bc -l)"tb"
  elif [ "$MEMINFO" -ge "$ONE_GB" ]; then
    MEMINFO=$(echo "scale=2;$MEMINFO/$ONE_GB" | bc -l)"gb"
  elif [ "$MEMINFO" -ge "$ONE_MB" ]; then
    MEMINFO=$(echo "scale=1;$MEMINFO/$ONE_MB" | bc -l)"mb"
  else
    MEMINFO=$(echo "scale=0;$MEMINFO/$ONE_KB" | bc -l)"kb"
  fi
fi

background="#002B36"
code=0
color="#93A1A1"
label="ï¡š"
text_full="$label $MEMINFO"
text_short="$text_full"

warn_threshold=75  # %
[ "$SOURCE" = "swap" ] && warn_threshold=30
[ $(echo "$SOURCE_PERC>=$warn_threshold" | bc) -ne "0" ] && color="#B58900"

crit_threshold=90  # %
[ "$SOURCE" = "swap" ] && crit_threshold=50
if [ $(echo "$SOURCE_PERC>=$crit_threshold" | bc) -ne "0" ]; then
  background="#CB4B16"
  code=33
  color="#FDF6E3"
fi

echo "$text_full"
echo "$text_short"
echo "$color"
echo "$background"

exit "$code"
